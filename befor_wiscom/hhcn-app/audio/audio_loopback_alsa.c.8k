/*
 * demo: audio loopback
 *
 * audio_loopback application used for the LSP demo
 *
 * Copyright (C) 2009 Texas Instruments Incorporated - http://www.ti.com/
 *
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the
 * distribution.
 *
 * Neither the name of Texas Instruments Incorporated nor the names of
 * its contributors may be used to endorse or promote products derived
 * from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
*/

/* Use the newer ALSA API */
#define ALSA_PCM_NEW_HW_PARAMS_API

#include <alsa/asoundlib.h>
#include<stdio.h>
#include<fcntl.h>
#include<pthread.h>
#include<semaphore.h>
#include<errno.h>
#include<string.h>
#include<sys/ioctl.h>
#include<linux/soundcard.h>
#include<poll.h>

#define PLAYBACK 0
#define CAPTURE 1
int rc;

int buffer_size;

snd_pcm_t *handle[2];
snd_pcm_hw_params_t *params;
unsigned int val;
int dir;
snd_pcm_uframes_t frames;

pthread_t recorder_thread, player_thread;
int pipe_desc[2];

void *recorder(void *arg);
void *player(void *arg);
void rdfile(void);
unsigned char wavhead[]={
//00000000   52 49 46 46  C4 D2 1E 00  57 41 56 45  66 6D 74 20  10 00 00 00  RIFF....WAVEfmt ....
//00000014   01 00 01 00  80 3E 00 00  00 7D 00 00  02 00 10 00  64 61 74 61
    0x52,0x49,0x46,0x46,0xc4,0xd2,0x1e,0x00,0x57,0x41,0x56,0x45,0x66,0x6d,0x74,0x20,0x10,0x00,0x00,0x00,
	0x01,0x00,0x01,0x00,0x80,0x3e,0x00,0x00,0x00,0x7d,0x00,0x00,0x02,0x00,0x10,0x00,0x64,0x61,0x74,0x61,
	0x00,0x00,0x00,0x00
	};
typedef struct { 
	unsigned short  format_tag; 
	unsigned short  channels;           /* 1 = mono, 2 = stereo */ 
	unsigned long   samplerate;         /* typically: 44100, 32000, 22050, 11025 or 8000*/ 
	unsigned long   bytes_per_second;   /* SamplesPerSec * BlockAlign*/ 
	unsigned short  blockalign;         /* Channels * (BitsPerSample / 8)*/ 
	unsigned short  bits_per_sample;    /* 16 or 8 */ 
}WAVEAUDIOFORMAT; 


int main()
{
	int i = 0;

#if 0
	if (pipe(pipe_desc)) {
		printf("audio_loopback: unable to create pipe\n");
		exit(0);
	}
#endif

#if 0 
	/* Open PCM device for playback. */
	rc = snd_pcm_open(&handle[PLAYBACK], "default",
			  SND_PCM_STREAM_PLAYBACK, 0);
	if (rc < 0) {
		printf("audio_loopback: unable to open pcm device: %s\n", snd_strerror(rc));
		exit(1);
	}
#else

	/* Open PCM device for record. */
	rc = snd_pcm_open(&handle[CAPTURE], "default",
			  SND_PCM_STREAM_CAPTURE, 0);
	if (rc < 0) {
		printf("audio_loopback: unable to open pcm device: %s\n", snd_strerror(rc));
		exit(1);
	}
#endif
	//for (i = 0; i < 2; i++) {
#if 1 //record
	for (i = 1; i < 2; i++) {
#else
	for (i = 0; i < 1; i++) {
#endif //play
		/* Allocate a hardware parameters object. */
		snd_pcm_hw_params_alloca(&params);

		/* Fill it in with default values. */
		snd_pcm_hw_params_any(handle[i], params);

		/* Set the desired hardware parameters. */

		/* Interleaved mode */
		snd_pcm_hw_params_set_access(handle[i], params,
				     SND_PCM_ACCESS_RW_INTERLEAVED);

		/* Signed 16-bit little-endian format */
		snd_pcm_hw_params_set_format(handle[i], params,
					     SND_PCM_FORMAT_S16_LE);

		/* Two channels (stereo) */
		//snd_pcm_hw_params_set_channels(handle[i], params, 2);
		snd_pcm_hw_params_set_channels(handle[i], params, 1);

		/* 44100 bits/second sampling rate (CD quality) */
		//val = 44100;
	//	val = 16000; //lzcx
		val = 8000; //lzcx
		snd_pcm_hw_params_set_rate_near(handle[i], params, &val, &dir);

		/* Set period size */
		frames = 1024;
		snd_pcm_hw_params_set_period_size_near(handle[i],
						       params, &frames, &dir);

		/* Write the parameters to the driver */
		rc = snd_pcm_hw_params(handle[i], params);
		if (rc < 0) {
			printf("audio_loopback: unable to set hw parameters: %s\n", snd_strerror(rc));
			exit(1);
		}
	}
	/* Use a buffer large enough to hold one period */
	
	snd_pcm_hw_params_get_period_size(params, &frames, &dir);
	//buffer_size = frames * 4;	/* 2 bytes/sample, 2 channels */
	buffer_size = frames * 2;	/* 2 bytes/sample, 1 channels */

//	pthread_create(&recorder_thread, NULL, recorder, NULL);
//	pthread_create(&player_thread, NULL, player, NULL);
//	pthread_join(recorder_thread, NULL);
//	pthread_join(player_thread, NULL);
#if 10 
wrtofile();
#else
rdfile();
#endif

	printf("audio_loopback: Both threads are exited...\n");
	return 0;

}
void rdfile(void)
{
	unsigned char *buffer,*buffer1;
	FILE *fp;
	int i,time;
	buffer = (unsigned char *)malloc(buffer_size);
	if (!buffer) {
		printf("audio_loopback: could not allocate memory for the recorder audio buffer\n");
		return ;
	}
	buffer1 = (unsigned char *)malloc(buffer_size);
	if (!buffer1) {
		printf("audio_loopback: could not allocate memory for the recorder audio buffer\n");
		free(buffer);
		return ;
	}

	fp = fopen("1.wav","rb");
	if(NULL == fp) {
		printf("err open file\n");
		free(buffer);
		free(buffer1);
		return;
	}
	time = 0;
	while(1){
		printf("time %d\n",time);
		if (1 != fread(buffer, buffer_size , 1 , fp)){
			printf("audio_loopback: error reading from the file\n");
			break;
		}
		rc = snd_pcm_writei(handle[PLAYBACK], buffer, frames);
		if (rc == -EAGAIN)
			continue;
		if (rc == -EPIPE) {
			/* EPIPE means underrun */
			printf("audio_loopback: underrun occurred\n");
			snd_pcm_prepare(handle[PLAYBACK]);
			/*snd_pcm_recover(handle[PLAYBACK], rc, 0);*/
		} else if (rc < 0) {
			printf("audio_loopback: error from writei: %s\n", snd_strerror(rc));
		} else if (rc != (int)frames) {
			printf("audio_loopback: short write, write %d frames\n", rc);
		}
		time++;
		if(time > 256) break;
		
	}


		free(buffer);
		free(buffer1);
		fclose(fp);

}
void wrtofile(void)
{
	unsigned char *buffer,*buffer1;
	FILE *fp;
	int i,time,len,length,w;
    WAVEAUDIOFORMAT format;   
	buffer = (unsigned char *)malloc(buffer_size);
	if (!buffer) {
		printf("audio_loopback: could not allocate memory for the recorder audio buffer\n");
		return ;
	}
	buffer1 = (unsigned char *)malloc(buffer_size);
	if (!buffer1) {
		printf("audio_loopback: could not allocate memory for the recorder audio buffer\n");
		free(buffer);
		return ;
	}

	fp = fopen("1.wav","w+");
	if(NULL == fp) return;
#if 0 
		if (fwrite(wavhead, 40, 1 , fp) != 1) {
			goto exit1;
		}
#else
	 format.format_tag = 1;   
     format.channels = 1;   
     format.samplerate = 8000;//16000;   
     format.bits_per_sample = 16;   
     format.blockalign = 1*(16/8);//channels * (resolution/8);   
     format.bytes_per_second = format.samplerate * format.blockalign;   
     fseek(fp, 0, SEEK_SET);   
	 fwrite("RIFF\0\0\0\0WAVEfmt ", sizeof(char), 16, fp);
	 length = 16;   
	 fwrite(&length, 1, sizeof(long), fp); /* Length of Format (always 16) */   
	 fwrite(&format, 1, sizeof(format), fp);   
     fwrite("data\0\0\0\0", sizeof(char), 8, fp); /* Write data chunk */  
#endif
	time = 0;
	while(1) {
		rc = snd_pcm_readi(handle[CAPTURE], buffer, frames);
		if (rc == -EAGAIN)
			continue;
		if (rc == -EPIPE) {
			/* EPIPE means overrun */
			printf("audio_loopback: overrun occurred\n");
			snd_pcm_prepare(handle[CAPTURE]);
			/*snd_pcm_recover(handle[CAPTURE], rc, 0);*/
		} else if (rc < 0) {
			printf("audio_loopback: error from read: %s\n", snd_strerror(rc));
		} else if (rc != (int)frames) {
			printf("audio_loopback: short read, read %d frames\n", rc);
		}

#if 1 
#if 1 
		w = 0;
		for(i=0 ; i < buffer_size/2 ; i+=4){
			((unsigned short *)buffer1)[w++]  = ((unsigned short *)buffer)[i+3]; //lzcx
		}
		
		if (fwrite(buffer1, w*2, 1 , fp) != 1) {
#else
			w = 0;
			for(i=0 ; i < buffer_size ; i+=4){
				((unsigned char *)buffer1)[w++]  = ((unsigned char *)buffer)[i+3]; //lzcx
			}

			if (fwrite(buffer1, w, 1 , fp) != 1) {

#endif
#else
		if (fwrite(buffer, buffer_size, 1 , fp) != 1) {
#endif
			printf("audio_loopback: error writing to the pipe\n");
			break;
		}		
		time++;
		if(time > 1000) break;
	}
	    fseek(fp,0x4,SEEK_SET);
		len = 2048*1001/4+44-8;

		fwrite(&len,1,4,fp);
	    fseek(fp,40,SEEK_SET);
		len = 2048*1001/4;
		fwrite(&len,1,4,fp);
exit1:
		fclose(fp);
		free(buffer);
		free(buffer1);
}
void *recorder(void *arg)
{
	unsigned char *buffer;
	
	buffer = (unsigned char *)malloc(buffer_size);
	if (!buffer) {
		printf("audio_loopback: could not allocate memory for the recorder audio buffer\n");
		goto recorder_thread_exit;
	}
	rc = 0;

	while(1) {
		rc = snd_pcm_readi(handle[CAPTURE], buffer, frames);
		if (rc == -EAGAIN)
			continue;
		if (rc == -EPIPE) {
			/* EPIPE means overrun */
			printf("audio_loopback: overrun occurred\n");
			snd_pcm_prepare(handle[CAPTURE]);
			/*snd_pcm_recover(handle[CAPTURE], rc, 0);*/
		} else if (rc < 0) {
			printf("audio_loopback: error from read: %s\n", snd_strerror(rc));
		} else if (rc != (int)frames) {
			printf("audio_loopback: short read, read %d frames\n", rc);
		}
		if (write(pipe_desc[1], buffer, buffer_size) != buffer_size) {
			printf("audio_loopback: error writing to the pipe\n");
			break;
		}		
	}

recorder_thread_exit:
	printf("audio_loopback: recorder thread exited\n");
	free(buffer);
	pthread_exit(0);
}

void *player(void *arg)
{
	unsigned char *buffer;
	
	buffer = (unsigned char *)malloc(buffer_size);
	if (!buffer) {
		printf("audio_loopback: could not allocate memory for the player audio buffer\n");
		goto player_thread_exit;
	}
	rc = 0;

	while(1){
		if (read(pipe_desc[0], buffer, buffer_size) != buffer_size) {
			printf("audio_loopback: error reading from the pipe\n");
			break;
		}
		rc = snd_pcm_writei(handle[PLAYBACK], buffer, frames);
		if (rc == -EAGAIN)
			continue;
		if (rc == -EPIPE) {
			/* EPIPE means underrun */
			printf("audio_loopback: underrun occurred\n");
			snd_pcm_prepare(handle[PLAYBACK]);
			/*snd_pcm_recover(handle[PLAYBACK], rc, 0);*/
		} else if (rc < 0) {
			printf("audio_loopback: error from writei: %s\n", snd_strerror(rc));
		} else if (rc != (int)frames) {
			printf("audio_loopback: short write, write %d frames\n", rc);
		}
		
	}

player_thread_exit:
	printf("audio_loopback: player thread exited...\n");
	free(buffer);
	pthread_exit(0);
}
