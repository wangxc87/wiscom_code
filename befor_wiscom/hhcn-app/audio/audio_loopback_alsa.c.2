/*
 * demo: audio loopback
 *
 * audio_loopback application used for the LSP demo
 *
 * Copyright (C) 2009 Texas Instruments Incorporated - http://www.ti.com/
 *
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the
 * distribution.
 *
 * Neither the name of Texas Instruments Incorporated nor the names of
 * its contributors may be used to endorse or promote products derived
 * from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
*/

/* Use the newer ALSA API */
#define ALSA_PCM_NEW_HW_PARAMS_API

#include <alsa/asoundlib.h>
#include<stdio.h>
#include<fcntl.h>
#include<pthread.h>
#include<semaphore.h>
#include<errno.h>
#include<string.h>
#include<sys/ioctl.h>
#include<linux/soundcard.h>
#include<poll.h>

#define PLAYBACK 0
#define CAPTURE 1
int rc;

int buffer_size;

snd_pcm_t *handle[2];
snd_pcm_hw_params_t *params;
unsigned int val;
int dir;
snd_pcm_uframes_t frames;

pthread_t recorder_thread, player_thread;
int pipe_desc[2];

void *recorder(void *arg);
void *player(void *arg);

int main()
{
	int i = 0;

#if 0
	if (pipe(pipe_desc)) {
		printf("audio_loopback: unable to create pipe\n");
		exit(0);
	}

	/* Open PCM device for playback. */
	rc = snd_pcm_open(&handle[PLAYBACK], "default",
			  SND_PCM_STREAM_PLAYBACK, 0);
	if (rc < 0) {
		printf("audio_loopback: unable to open pcm device: %s\n", snd_strerror(rc));
		exit(1);
	}
#endif

	/* Open PCM device for record. */
	rc = snd_pcm_open(&handle[CAPTURE], "default",
			  SND_PCM_STREAM_CAPTURE, 0);
	if (rc < 0) {
		printf("audio_loopback: unable to open pcm device: %s\n", snd_strerror(rc));
		exit(1);
	}
	//for (i = 0; i < 2; i++) {
	for (i = 1; i < 2; i++) {
		/* Allocate a hardware parameters object. */
		snd_pcm_hw_params_alloca(&params);

		/* Fill it in with default values. */
		snd_pcm_hw_params_any(handle[i], params);

		/* Set the desired hardware parameters. */

		/* Interleaved mode */
		snd_pcm_hw_params_set_access(handle[i], params,
				     SND_PCM_ACCESS_RW_INTERLEAVED);

		/* Signed 16-bit little-endian format */
		snd_pcm_hw_params_set_format(handle[i], params,
					     SND_PCM_FORMAT_S16_LE);

		/* Two channels (stereo) */
		//snd_pcm_hw_params_set_channels(handle[i], params, 2);
		snd_pcm_hw_params_set_channels(handle[i], params, 1);

		/* 44100 bits/second sampling rate (CD quality) */
		//val = 44100;
		val = 16000; //lzcx
		snd_pcm_hw_params_set_rate_near(handle[i], params, &val, &dir);

		/* Set period size */
		frames = 1024;
		snd_pcm_hw_params_set_period_size_near(handle[i],
						       params, &frames, &dir);

		/* Write the parameters to the driver */
		rc = snd_pcm_hw_params(handle[i], params);
		if (rc < 0) {
			printf("audio_loopback: unable to set hw parameters: %s\n", snd_strerror(rc));
			exit(1);
		}
	}
	/* Use a buffer large enough to hold one period */
	
	snd_pcm_hw_params_get_period_size(params, &frames, &dir);
	buffer_size = frames * 4;	/* 2 bytes/sample, 2 channels */

//	pthread_create(&recorder_thread, NULL, recorder, NULL);
//	pthread_create(&player_thread, NULL, player, NULL);
//	pthread_join(recorder_thread, NULL);
//	pthread_join(player_thread, NULL);
wrtofile();

	printf("audio_loopback: Both threads are exited...\n");
	return 0;

}
void wrtofile(void)
{
	unsigned char *buffer,*buffer1;
	FILE *fp;
	int i,time;
	buffer = (unsigned char *)malloc(buffer_size);
	if (!buffer) {
		printf("audio_loopback: could not allocate memory for the recorder audio buffer\n");
		return ;
	}
	buffer1 = (unsigned char *)malloc(buffer_size);
	if (!buffer1) {
		printf("audio_loopback: could not allocate memory for the recorder audio buffer\n");
		free(buffer);
		return ;
	}

	fp = fopen("1.wav","w+");
	if(NULL == fp) return;
	time = 0;
	while(1) {
		rc = snd_pcm_readi(handle[CAPTURE], buffer, frames);
		if (rc == -EAGAIN)
			continue;
		if (rc == -EPIPE) {
			/* EPIPE means overrun */
			printf("audio_loopback: overrun occurred\n");
			snd_pcm_prepare(handle[CAPTURE]);
			/*snd_pcm_recover(handle[CAPTURE], rc, 0);*/
		} else if (rc < 0) {
			printf("audio_loopback: error from read: %s\n", snd_strerror(rc));
		} else if (rc != (int)frames) {
			printf("audio_loopback: short read, read %d frames\n", rc);
		}

		for(i=0 ; i < buffer_size/8 ; i+=2){
			buffer1[i]  = buffer[16*i+2];
			buffer1[i+1]  = buffer[16*i+2+1];
		}
		
		//if (fwrite(buffer1, buffer_size/8, 1 , fp) != 1) {
		if (fwrite(buffer, buffer_size, 1 , fp) != 1) {
			printf("audio_loopback: error writing to the pipe\n");
			break;
		}		
		time++;
		if(time > 200) break;
	}
		fclose(fp);
		free(buffer);
		free(buffer1);
}
void *recorder(void *arg)
{
	unsigned char *buffer;
	
	buffer = (unsigned char *)malloc(buffer_size);
	if (!buffer) {
		printf("audio_loopback: could not allocate memory for the recorder audio buffer\n");
		goto recorder_thread_exit;
	}
	rc = 0;

	while(1) {
		rc = snd_pcm_readi(handle[CAPTURE], buffer, frames);
		if (rc == -EAGAIN)
			continue;
		if (rc == -EPIPE) {
			/* EPIPE means overrun */
			printf("audio_loopback: overrun occurred\n");
			snd_pcm_prepare(handle[CAPTURE]);
			/*snd_pcm_recover(handle[CAPTURE], rc, 0);*/
		} else if (rc < 0) {
			printf("audio_loopback: error from read: %s\n", snd_strerror(rc));
		} else if (rc != (int)frames) {
			printf("audio_loopback: short read, read %d frames\n", rc);
		}
		if (write(pipe_desc[1], buffer, buffer_size) != buffer_size) {
			printf("audio_loopback: error writing to the pipe\n");
			break;
		}		
	}

recorder_thread_exit:
	printf("audio_loopback: recorder thread exited\n");
	free(buffer);
	pthread_exit(0);
}

void *player(void *arg)
{
	unsigned char *buffer;
	
	buffer = (unsigned char *)malloc(buffer_size);
	if (!buffer) {
		printf("audio_loopback: could not allocate memory for the player audio buffer\n");
		goto player_thread_exit;
	}
	rc = 0;

	while(1){
		if (read(pipe_desc[0], buffer, buffer_size) != buffer_size) {
			printf("audio_loopback: error reading from the pipe\n");
			break;
		}
		rc = snd_pcm_writei(handle[PLAYBACK], buffer, frames);
		if (rc == -EAGAIN)
			continue;
		if (rc == -EPIPE) {
			/* EPIPE means underrun */
			printf("audio_loopback: underrun occurred\n");
			snd_pcm_prepare(handle[PLAYBACK]);
			/*snd_pcm_recover(handle[PLAYBACK], rc, 0);*/
		} else if (rc < 0) {
			printf("audio_loopback: error from writei: %s\n", snd_strerror(rc));
		} else if (rc != (int)frames) {
			printf("audio_loopback: short write, write %d frames\n", rc);
		}
		
	}

player_thread_exit:
	printf("audio_loopback: player thread exited...\n");
	free(buffer);
	pthread_exit(0);
}
